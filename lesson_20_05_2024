#include <iostream>
#include <list>
#define random(min,max) min + rand() % (max - min + 1)
using namespace std;

template <typename T, typename T2>
class MySet {
private:
    class Node {
    public:
        T key;
        T2 value;
        Node* left = nullptr;
        Node* right = nullptr;
        Node(T key, T2 value) : key(key), left(nullptr), right(nullptr), value(value) {};
};

    Node* root = nullptr;

public:
    MySet() : root(nullptr) {}
    
    void insert(T key, T2 value) {
        root = insertRecursive(this->root, key, value);
    }

    void show() {
        showRecursive(this->root);
    }

private:

    void showRecursive(Node* node) {
        if (node != nullptr) {
            showRecursive(node->left);
            cout << node->key << " : " << node->value << ", ";
            showRecursive(node->right);
        }
    }

    Node* insertRecursive(Node* node, T key, T2 value) {
        if (node == nullptr) return new Node(key, value);
        if (key < node->key) node->left = insertRecursive(node->left, key, value);
        else if (key > node->key) node->right = insertRecursive(node->right, key, value);
        return node;
    }

};

int main()
{                
    MySet<int,char> set;
    set.insert(1, 'S');
    set.insert(5, 'O');
    set.insert(7, 'Q');
    set.insert(4, 'O');
    set.insert(10, 'A');
    set.show();

}
