#include <iostream>
#include <string>
using namespace std;

template <typename T>

class ForwardList {
private:
	class Node {
	public:
		T elem;
		Node* next;

		Node(const T& value) : elem(value), next(nullptr) {};

	};

	Node* head;

public:
	ForwardList() : head(nullptr) {};

	bool empty() const {
		return head == nullptr;
	}
	void push_front(const T& value) {			//добавление в начало
		Node* newNode = new Node(value);
		newNode->next = head;
		head = newNode;
	}

	void push_back(const T& value) {			//добавление в конец
		Node* cur = head;
		Node* newNode = new Node(value);
		while(cur->next != nullptr) {
			cur = cur->next;
		}
		cur->next = newNode(value);
	}

	void pop_front() {			//удаление в начале
		if (empty()) throw out_of_range("ERROR\n");
		Node* buf;
		buf = head->next;
		delete head;
		head = buf;
	}

	void pop_back() {			//удаление в конце
		if (empty()) throw out_of_range("ERROR\n");
		Node* cur = head;
		while ((cur->next)->next != nullptr) {
			cur = cur->next;
		}
		delete cur->next;
		cur->next = nullptr;
	}

	void index_set() {			//указать ПОСЛЕ какого элемента вставить

	}

	void show() {
		Node* cur = head;
		while (cur->next != nullptr) {
			cout << cur->elem << " ";
			cur = cur->next;
		}
		cout << cur->elem << endl;
	}


};

int main()
{
	ForwardList<int> test;
	//cout << test.empty() << endl;
	test.push_front(2);
	test.push_front(1);
	test.push_front(8);
	test.push_front(2);
	test.push_front(5);
	test.push_front(9);
	test.push_front(7);
	test.show();
	test.pop_back();
	test.show();


}

